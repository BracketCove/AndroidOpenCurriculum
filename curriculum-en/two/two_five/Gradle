## Gradle Build Tool

The standard build tool for Android Development is Gradle. The goal of Gradle's design is to provide users with very good default configurations, while allowing more advanced users flexibility in the way they use the tool. In this lesson, we will learn a bit about the various configuration files which you will use to manage your Android project.

Within a new Android project, the gradle files which you will work with most often are as follows:
- [Project Name]/build.gradle, referred to as the Project Level build.gradle file
- [Project Name]/[Module Name]/build.gradle, referred to as a Module Level build.gradle file
- [Project Name]/settings.gradle, specifies which Modules exist in the project

There are other files, but there is generally no need to manipulate them.

### Project Level Configurations

This file contains configurations you will want to expose to the entire project. Generally speaking, you will only have to worry about updating version numbers when appropriate, or adding online Repositories, from which you can download libraries to use in your project. Libraries are pre-made collections of code which allow you to use other people's solutions to common problems. Most libraries for Android (3rd party or otherwise) will give you specific instructions for what may need to be added to this file.

### Module Level Configurations

Each module in your project (a new module called "app" is generated for new projects by default in AS) will have its own build.gradle file. This file contains configurations specific to the module itself. In order to add functionality to this file, it is common to add different Gradle "plugins" such as:
    
    apply plugin: 'com.android.application'
    
The com.android.application plugin in particular supports configurations which should be present in the android {...} gradle task:
    
     android {
            compileSdkVersion 28
            defaultConfig {
                applicationId "com.opensource.helloworld"
                minSdkVersion 21
                targetSdkVersion 28
                versionCode 1
                versionName "1.0"
                testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
            }
            buildTypes {
                release {
                    minifyEnabled false
                    proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),  'proguard-rules.pro'
                }
            }
        }
        
When you wish to add a dependency (such as a 3rd party library or another Gradle module within your project), you would 
do so within the dependencies {} Gradle task, such as: 

    dependencies {
        implementation fileTree(dir: 'libs', include: ['*.jar'])
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
        implementation 'com.android.support:appcompat-v7:28.0.0'
        implementation 'com.android.support.constraint:constraint-layout:1.1.3'
        testImplementation 'junit:junit:4.12'
        androidTestImplementation 'com.android.support.test:runner:1.0.2'
        androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    }

- "implementation" refers to dependencies which are made accessible within the source files of the current module.
- "testImplementation" refers to dependencies which are made accessible for JVM Unit Testing in [Project Name]/[Module Name]/test
- "androidTestImplementation" refers to dependencies which are made accessible for Instrumented Testing (Instrument is another word for "Device") in [Project Name]/[Module Name]/androidTest

Without worrying about how testing works, these different identifiers indicate dependencies which generally should not be included in
in the production application; but are necessary during the testing and development stages.

**[Previous Lesson](curriculum-en/two/two_four/AndroidManifest.md)**<br>
**[Next Lesson](curriculum-en/two/two_six/Deployment.md)**<br>